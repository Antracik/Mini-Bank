// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(BankContext))]
    partial class BankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mini_Bank.DbRepo.Entities.AccountDbRepoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountStatus")
                        .HasColumnName("StatusId");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<int>("Currency")
                        .HasColumnName("CurrencyId");

                    b.Property<string>("IBAN")
                        .IsRequired();

                    b.Property<int>("WalletId");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatus");

                    b.HasIndex("Currency");

                    b.HasIndex("WalletId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Mini_Bank.DbRepo.Entities.RegistrantDbRepoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("Country")
                        .HasColumnName("CountryId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Country");

                    b.HasIndex("UserId");

                    b.ToTable("Registrant");
                });

            modelBuilder.Entity("Mini_Bank.DbRepo.Entities.UserDbRepoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Mini_Bank.DbRepo.Entities.WalletDbRepoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsVerified");

                    b.Property<int>("Number");

                    b.Property<int>("RegistrantId");

                    b.Property<int>("WalletStatus")
                        .HasColumnName("WalletStatusId");

                    b.HasKey("Id");

                    b.HasIndex("RegistrantId");

                    b.HasIndex("WalletStatus");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("Mini_Bank.Models.EnumModels.CountryModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Mini_Bank.Models.EnumModels.CurrencyModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Mini_Bank.Models.EnumModels.StatusModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Mini_Bank.DbRepo.Entities.AccountDbRepoModel", b =>
                {
                    b.HasOne("Mini_Bank.Models.EnumModels.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("AccountStatus")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mini_Bank.Models.EnumModels.CurrencyModel", "CurrencyRelation")
                        .WithMany()
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mini_Bank.DbRepo.Entities.WalletDbRepoModel", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mini_Bank.DbRepo.Entities.RegistrantDbRepoModel", b =>
                {
                    b.HasOne("Mini_Bank.Models.EnumModels.CountryModel", "CountryRelation")
                        .WithMany()
                        .HasForeignKey("Country")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mini_Bank.DbRepo.Entities.UserDbRepoModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mini_Bank.DbRepo.Entities.WalletDbRepoModel", b =>
                {
                    b.HasOne("Mini_Bank.DbRepo.Entities.RegistrantDbRepoModel", "Registrant")
                        .WithMany()
                        .HasForeignKey("RegistrantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mini_Bank.Models.EnumModels.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("WalletStatus")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
